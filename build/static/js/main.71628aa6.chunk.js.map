{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["MyPortal","domElement","time","arguments","length","undefined","_len","rest","Array","_key","WrapperComponent","_Component","PortalHOC","_getPrototypeOf2","_this","Object","classCallCheck","this","_len2","args","_key2","possibleConstructorReturn","getPrototypeOf","call","apply","concat","portal","document","getElementById","el","createElement","inherits","createClass","key","value","_this2","appendChild","setTimeout","removeChild","ReactDOM","createPortal","react_default","a","assign","props","Component","withPortal","_ref","children","Fragment","App","state","alertsList","Ref","React","createRef","onChangeHandler","_ref2","target","_this3","setState","onClickHandler","_this3$state","toConsumableArray","current","focus","_this$state","className","ref","type","onChange","disabled","onClick","map","e","i","Boolean","window","location","hostname","match","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.71628aa6.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\n\n\nconst withPortal = (domElement, time = null, ...rest) => {\n    return (WrapperComponent) =>\n        class PortalHOC extends Component {\n            portal = document.getElementById(domElement);\n            el = document.createElement('div')\n\n            componentDidMount() {\n                this.portal.appendChild(this.el)\n                if (time) {\n                    setTimeout(\n                        () => this.portal.removeChild(this.el)\n                        , time)\n                }\n            }\n\n            componentWillUnmount() {\n                this.portal.removeChild(this.el)\n            }\n\n            render() {\n                return (\n                    ReactDOM.createPortal(<WrapperComponent {...this.props}{...rest} />, this.el)\n                )\n            }\n        }\n}\n\nconst Portal = ({children}) => <>{children}</>\nconst MyPortal = withPortal('portal',3000)(Portal);\n\nclass App extends Component {\n    state = {\n        value: '',\n        alertsList: [],\n    }\n    Ref = React.createRef();\n\n    onChangeHandler = ({target: {value}}) => {\n        this.setState({value});\n    }\n\n    onClickHandler = () => {\n        const {value, alertsList} = this.state;\n        this.setState({\n            alertsList: [...alertsList, value],\n            value: '',\n        }, () => this.Ref.current.focus())\n\n\n    }\n\n    componentDidMount() {\n        this.Ref.current.focus();\n    }\n\n    render() {\n        const {value, alertsList} = this.state;\n        return (\n            <div className={`App`}>\n                <input\n                    ref={this.Ref}\n                    type=\"text\"\n                    value={value}\n                    onChange={this.onChangeHandler}\n                />\n                <button\n                    type={`button`}\n                    disabled={!value}\n                    onClick={this.onClickHandler}\n                >Add alert\n                </button>\n                {\n                    alertsList && alertsList.map((e, i) => (\n                        <MyPortal key={e + i}>\n                            {e}\n                        </MyPortal>\n                    ))\n                }\n\n            </div>\n        );\n    }\n}\n\nApp.propTypes = {};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}